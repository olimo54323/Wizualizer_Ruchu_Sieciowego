MAC_OUI_VENDORS = {
    '000000': 'Officially Xerox',
    '000001': 'SuperLAN',
    '000002': 'BBN Internal',
    '000003': 'XEROX CORPORATION',
    '000004': 'XEROX CORPORATION',
    '000005': 'XEROX CORPORATION',
    '00000C': 'Cisco',
    '00000E': 'Fujitsu',
    '000010': 'Sytek',
    '000020': 'DIAB',
    '000021': 'SC&C',
    '000022': 'Visual Technology',
    '000023': 'ABB Automation',
    '000024': 'Oki Electric Industry',
    '000029': 'IMC Networks',
    '00002A': 'TRW',
    '00002F': 'COMDESIGN',
    '000032': 'GPT Limited',
    '000050': 'NETWORK SYSTEMS',
    '000055': 'AT&T',
    '000077': 'INTERPHASE',
    '00007A': 'Ardent',
    '00007B': 'Research Machines',
    '0000A7': 'NCD',
    '0000A9': 'NETWORK SYSTEMS',
    '0000AA': 'XEROX CORPORATION',
    '0000B3': 'CIMLINC',
    '0000B7': 'DOVE',
    '0000BC': 'Allen-Bradley',
    '0000C0': 'WESTERN DIGITAL',
    '0000C5': 'FARALLON',
    '0000C6': 'HP',
    '0000C8': 'ALTOS',
    '0000C9': 'Emulex',
    '0000D7': 'DARTMOUTH',
    '0000D8': 'NOVELL',
    '0000DD': 'Gould',
    '0000DE': 'UNISYS',
    '0000E2': 'ACER',
    '0000EF': 'Alantec',
    '0000F0': 'Samsung',
    '0000F2': 'SPIDER SYSTEMS',
    '0000F3': 'GANDALF DATA',
    '0000F4': 'Allied Telesis',
    '0000F5': 'DIAMOND SALES',
    '0000F6': 'Applied Microsystems',
    '0000F8': 'DEC',
    '0000FB': 'RECHNER',
    '001000': 'Cable Television Laboratories',
    '001007': 'Cisco',
    '00100D': 'Cisco',
    '001011': 'Cisco',
    '001014': 'Cisco',
    '00102F': 'Cisco',
    '001054': 'Cisco',
    '00105A': '3COM',
    '0010E7': 'Breezecom',
    '0010F6': 'Cisco',
    '0020C2': 'TEXAS INSTRUMENTS',
    '0020D2': 'RAD Data Communications',
    '00400B': 'Cisco',
    '00601D': 'LUCENT TECHNOLOGIES',
    '00809F': 'ALE International',
    '00E018': 'ASUSTek',
    '010203': 'Techsan',
    '010CCC': 'Apple',
    '043695': 'Apple',
    '081196': 'Intel',
    '087045': 'Intel',
    '0C8112': 'Intel',
    '103047': 'Apple',
    '14FEB5': 'Dell',
    '182032': 'Apple',
    '1C6F65': 'Intel',
    '28633E': 'Siemens',
    '3C5AB4': 'Google',
    '3CA9F4': 'Intel',
    '4044F5': 'Samsung',
    '4860BC': 'Apple',
    '506B8D': 'Apple',
    '58CB52': 'Google',
    '5C969D': 'Apple',
    '609084': 'Apple',
    '68AB1E': 'Apple',
    '70106F': 'HP',
    '7CEBAE': 'Hewlett Packard',
    'A42983': 'Apple',
    'A860B6': 'Apple',
    'AC87A3': 'Apple',
    'B8C111': 'Apple',
    'C0A53E': 'Apple',
    'C88550': 'Apple',
    'D89695': 'Apple',
    'D8F883': 'Oracle',
    'E4E0C5': 'Samsung',
    'F0766F': 'Apple'
}

def get_mac_vendor(mac_address):
    mac = mac_address.replace(':', '').replace('-', '').replace('.', '').upper()
    oui = mac[:6]
    return MAC_OUI_VENDORS.get(oui, "Unknown")